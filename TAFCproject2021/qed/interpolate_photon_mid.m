%-------------------------------------------------------------------------------
%  Find chi for midrange photons 0.01 < eta < 3.3  ; Marija
%-------------------------------------------------------------------------------
function [chi] = interpolate_photon_mid(eta, ratio)

p1_array = [ 0.001773836232853,     0.004159773105190,     0.005909583673540,     0.006022338374199,     0.012028184722626,  ...
    -0.004317070831837,     0.009330893070144,     0.022133372122301,     0.015757086764085,     0.013817061729165,   ...
    -0.980486796007142,     -0.682697620064631,     -0.161298903150042,     -0.005809661704548,     0.012866929690746,  ...
    -0.000482475937002,     -0.000985616750807,     0.006209647636546,     0.013027947138266,     0.019074621074484,  ...
    0.001265577345342,     0.013336749438294,     0.048791963835746,     0.067308775582128,     0.044043687269626,   ...
    -0.000055358248880,     -0.001348721803424,     -0.012275052087300,     -0.045221323100608,     -0.033430575699799 ];
p2_array = [ -0.000170639654639,     0.007170182865574,     0.029058662140918,     0.034982833305507,     0.016674896115385,  ...
    0.268338782993809,     0.469351068095490,     0.351483214319252,     0.141973073260982,     0.030569503524505,   ...
    -4.909508871257551,     -2.996785964714983,     -0.507820495166353,     0.048413754117628,     0.026789393408900,   ...
    -0.004329396889427,     -0.024295168496621,     -0.033052751294962,     -0.017905509970837,     0.018581438999043,   ...
    0.004381022575082,     0.048108792452574,     0.186206593872071,     0.268302058587707,     0.154364638546128,  ...
    -0.000148670396644,     -0.003846576613533,     -0.038205552382314,     -0.164785712598556,     -0.161041306668578 ];
p3_array = [ 0.018175348373514,     0.072438926956503,     0.105531563563381,     0.067040495583811,     -0.170000259566593,   ...
    0.223262330890935,     0.471684923546082,     0.388922426066648,     0.153796985221281,     -0.160391408919875,   ...
    -31.680084424698883,     -20.084722542030761,  	     -4.510229318398666,     -0.359559263573851,     -0.180449508408224,   ...
    -0.012347312978628,     -0.090172836468116,     -0.213250060611825,     -0.192351240589369,    -0.229109462035024,   ...
    0.003111666251559,     0.039690828311627,     0.185564686028165,     0.338027042839089,     0.028759127464761,    ...
    0.000023481513433,     0.000022801554947,     -0.007165145535375,     -0.081707990054295,     -0.316879491793383 ];
p4_array = [ -0.031911342972680,     -0.144318629353999,     -0.245920478028274,     -0.190427282615784,     1.421796540765927,   ...
    -2.545220550191603,     -3.553366289404980,     -2.017380580443948,     -0.610503032302649,     1.383423724377177,  ...
    -109.316616098549332,     -72.579453825704149,     -18.597839190749774,     -2.373170424438470,     1.312928625714792,   ...
    -0.015073626703808,     -0.125181013600805,     -0.346874427727219,     -0.241763740356303,     1.383511050857337,    ...
    -0.002791369594754,     -0.022584555300707,     -0.032865372915183,     0.175959378659173,     1.587766611263539,   ...
    0.000269829602639,     0.006650538450129,     0.064272326168450,     0.299244401499319,     1.624536255589060 ];
p5_array = [ 0.049421028623077,     0.245823831180409,     0.453711481196624,     3.371207968157663,     -0.715551819439772,  ...
    6.515531213872445,     9.740563653619228,     5.966701464021353,     4.890315707496041,     -0.547768232060367,   ...
    93.612358800233736,     68.274849458436137,     20.721252596432443,     6.552637908179546,     -0.476703814260746,  ...
    -0.038414492310977,     -0.361223808578362,     -1.312294486900120,     -2.265078646565482,     -2.015389446419847,   ...
    -0.011376879355673,     -0.133755830526832,     -0.611451162601370,     -1.328331100768032,     -1.556871006962085,   ...
    -0.000243937957341,     -0.005785523688170,     -0.052781127864644,     -0.226485066799127,     -0.725872671153799 ];

lt_eta = log10(eta);

% Here we look for the right section of interpolation coefficients to use;
% Please note that second half of the coefficients (above n=16) is done for log10(1-ratio)
% due to the numerical precision when ratio => 1.0

if ( ratio < 0.4 )
    n = 1;
    ltr = log10(ratio);
elseif ( ratio < 0.7 )
    n = 6;
    ltr = log10(ratio);
elseif ( ratio < 0.88 )
    n = 11;
    ltr = log10(ratio);
elseif (ratio < 0.975)
    n = 16;
    ltr = log10(1.0-ratio);
elseif (ratio < 0.9993)
    n = 21;
    ltr = log10(1.0-ratio);
else
    n = 26;
    ltr = log10(1.0-ratio);
end

pc1 = p1_array(n) * ( lt_eta^4.0 ) + p2_array(n) * ( lt_eta^3.0 ) + p3_array(n) * ( lt_eta^2.0 ) + p4_array(n) * lt_eta + p5_array(n);
pc2 = p1_array(n+1) * ( lt_eta^4.0 ) + p2_array(n+1) * ( lt_eta^3.0 ) + p3_array(n+1) * ( lt_eta^2.0 ) + p4_array(n+1) * lt_eta + p5_array(n+1);
pc3 = p1_array(n+2) * ( lt_eta^4.0 ) + p2_array(n+2) * ( lt_eta^3.0 ) + p3_array(n+2) * ( lt_eta^2.0 ) + p4_array(n+2) * lt_eta + p5_array(n+2);
pc4 = p1_array(n+3) * ( lt_eta^4.0 ) + p2_array(n+3) * ( lt_eta^3.0 ) + p3_array(n+3) * ( lt_eta^2.0 ) + p4_array(n+3) * lt_eta + p5_array(n+3);
pc5 = p1_array(n+4) * ( lt_eta^4.0 ) + p2_array(n+4) * ( lt_eta^3.0 ) + p3_array(n+4) * ( lt_eta^2.0 ) + p4_array(n+4) * lt_eta + p5_array(n+4);
pc = pc1 * ( ltr^4.0 ) + pc2 * ( ltr^3.0 ) + pc3 * ( ltr^2.0 ) + pc4 * ltr + pc5;
chi = 10^pc;